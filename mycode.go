// Package mycode provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package mycode

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CourierDtoCourierType.
const (
	CourierDtoCourierTypeAUTO CourierDtoCourierType = "AUTO"
	CourierDtoCourierTypeBIKE CourierDtoCourierType = "BIKE"
	CourierDtoCourierTypeFOOT CourierDtoCourierType = "FOOT"
)

// Defines values for CreateCourierDtoCourierType.
const (
	CreateCourierDtoCourierTypeAUTO CreateCourierDtoCourierType = "AUTO"
	CreateCourierDtoCourierTypeBIKE CreateCourierDtoCourierType = "BIKE"
	CreateCourierDtoCourierTypeFOOT CreateCourierDtoCourierType = "FOOT"
)

// Defines values for GetCourierMetaInfoResponseCourierType.
const (
	AUTO GetCourierMetaInfoResponseCourierType = "AUTO"
	BIKE GetCourierMetaInfoResponseCourierType = "BIKE"
	FOOT GetCourierMetaInfoResponseCourierType = "FOOT"
)

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse = map[string]interface{}

// CompleteOrder defines model for CompleteOrder.
type CompleteOrder struct {
	CompleteTime time.Time `json:"complete_time"`
	CourierId    int64     `json:"courier_id"`
	OrderId      int64     `json:"order_id"`
}

// CompleteOrderRequestDto defines model for CompleteOrderRequestDto.
type CompleteOrderRequestDto struct {
	CompleteInfo []CompleteOrder `json:"complete_info"`
}

// CourierDto defines model for CourierDto.
type CourierDto struct {
	CourierId    int64                 `json:"courier_id"`
	CourierType  CourierDtoCourierType `json:"courier_type"`
	Regions      []int32               `json:"regions"`
	WorkingHours []string              `json:"working_hours"`
}

// CourierDtoCourierType defines model for CourierDto.CourierType.
type CourierDtoCourierType string

// CouriersGroupOrders defines model for CouriersGroupOrders.
type CouriersGroupOrders struct {
	CourierId int64         `json:"courier_id"`
	Orders    []GroupOrders `json:"orders"`
}

// CreateCourierDto defines model for CreateCourierDto.
type CreateCourierDto struct {
	CourierType  CreateCourierDtoCourierType `json:"courier_type"`
	Regions      []int32                     `json:"regions"`
	WorkingHours []string                    `json:"working_hours"`
}

// CreateCourierDtoCourierType defines model for CreateCourierDto.CourierType.
type CreateCourierDtoCourierType string

// CreateCourierRequest defines model for CreateCourierRequest.
type CreateCourierRequest struct {
	Couriers []CreateCourierDto `json:"couriers"`
}

// CreateCouriersResponse defines model for CreateCouriersResponse.
type CreateCouriersResponse struct {
	Couriers []CourierDto `json:"couriers"`
}

// CreateOrderDto defines model for CreateOrderDto.
type CreateOrderDto struct {
	Cost          int32    `json:"cost"`
	DeliveryHours []string `json:"delivery_hours"`
	Regions       int32    `json:"regions"`
	Weight        float32  `json:"weight"`
}

// CreateOrderRequest defines model for CreateOrderRequest.
type CreateOrderRequest struct {
	Orders []CreateOrderDto `json:"orders"`
}

// GetCourierMetaInfoResponse defines model for GetCourierMetaInfoResponse.
type GetCourierMetaInfoResponse struct {
	CourierId    int64                                 `json:"courier_id"`
	CourierType  GetCourierMetaInfoResponseCourierType `json:"courier_type"`
	Earnings     *int32                                `json:"earnings,omitempty"`
	Rating       *int32                                `json:"rating,omitempty"`
	Regions      []int32                               `json:"regions"`
	WorkingHours []string                              `json:"working_hours"`
}

// GetCourierMetaInfoResponseCourierType defines model for GetCourierMetaInfoResponse.CourierType.
type GetCourierMetaInfoResponseCourierType string

// GetCouriersResponse defines model for GetCouriersResponse.
type GetCouriersResponse struct {
	Couriers []CourierDto `json:"couriers"`
	Limit    int32        `json:"limit"`
	Offset   int32        `json:"offset"`
}

// GroupOrders defines model for GroupOrders.
type GroupOrders struct {
	GroupOrderId int64      `json:"group_order_id"`
	Orders       []OrderDto `json:"orders"`
}

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse = map[string]interface{}

// OrderAssignResponse defines model for OrderAssignResponse.
type OrderAssignResponse struct {
	Couriers []CouriersGroupOrders `json:"couriers"`
	Date     openapi_types.Date    `json:"date"`
}

// OrderDto defines model for OrderDto.
type OrderDto struct {
	CompletedTime *time.Time `json:"completed_time,omitempty"`
	Cost          int32      `json:"cost"`
	DeliveryHours []string   `json:"delivery_hours"`
	OrderId       int64      `json:"order_id"`
	Regions       int32      `json:"regions"`
	Weight        float32    `json:"weight"`
}

// GetCouriersParams defines parameters for GetCouriers.
type GetCouriersParams struct {
	// Limit Максимальное количество курьеров в выдаче. Если параметр не передан, то значение по умолчанию равно 1.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Количество курьеров, которое нужно пропустить для отображения текущей страницы. Если параметр не передан, то значение по умолчанию равно 0.
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CouriersAssignmentsParams defines parameters for CouriersAssignments.
type CouriersAssignmentsParams struct {
	// Date Дата распределения заказов. Если не указана, то используется текущий день
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`

	// CourierId Идентификатор курьера для получения списка распредленных заказов. Если не указан, возвращаются данные по всем курьерам.
	CourierId *int `form:"courier_id,omitempty" json:"courier_id,omitempty"`
}

// GetCourierMetaInfoParams defines parameters for GetCourierMetaInfo.
type GetCourierMetaInfoParams struct {
	// StartDate Rating calculation start date
	StartDate openapi_types.Date `form:"startDate" json:"startDate"`

	// EndDate Rating calculation end date
	EndDate openapi_types.Date `form:"endDate" json:"endDate"`
}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	// Limit Максимальное количество заказов в выдаче. Если параметр не передан, то значение по умолчанию равно 1.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Количество заказов, которое нужно пропустить для отображения текущей страницы. Если параметр не передан, то значение по умолчанию равно 0.
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// OrdersAssignParams defines parameters for OrdersAssign.
type OrdersAssignParams struct {
	// Date Дата распределения заказов. Если не указана, то используется текущий день
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
}

// CreateCourierJSONRequestBody defines body for CreateCourier for application/json ContentType.
type CreateCourierJSONRequestBody = CreateCourierRequest

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = CreateOrderRequest

// CompleteOrderJSONRequestBody defines body for CompleteOrder for application/json ContentType.
type CompleteOrderJSONRequestBody = CompleteOrderRequestDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCouriers request
	GetCouriers(ctx context.Context, params *GetCouriersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCourier request with any body
	CreateCourierWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCourier(ctx context.Context, body CreateCourierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CouriersAssignments request
	CouriersAssignments(ctx context.Context, params *CouriersAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCourierMetaInfo request
	GetCourierMetaInfo(ctx context.Context, courierId int64, params *GetCourierMetaInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCourierById request
	GetCourierById(ctx context.Context, courierId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrders request
	GetOrders(ctx context.Context, params *GetOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrder request with any body
	CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrdersAssign request
	OrdersAssign(ctx context.Context, params *OrdersAssignParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteOrder request with any body
	CompleteOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteOrder(ctx context.Context, body CompleteOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrder request
	GetOrder(ctx context.Context, orderId int64, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCouriers(ctx context.Context, params *GetCouriersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouriersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCourierWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCourierRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCourier(ctx context.Context, body CreateCourierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCourierRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CouriersAssignments(ctx context.Context, params *CouriersAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCouriersAssignmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCourierMetaInfo(ctx context.Context, courierId int64, params *GetCourierMetaInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCourierMetaInfoRequest(c.Server, courierId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCourierById(ctx context.Context, courierId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCourierByIdRequest(c.Server, courierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrders(ctx context.Context, params *GetOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrdersAssign(ctx context.Context, params *OrdersAssignParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrdersAssignRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteOrder(ctx context.Context, body CompleteOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrder(ctx context.Context, orderId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCouriersRequest generates requests for GetCouriers
func NewGetCouriersRequest(server string, params *GetCouriersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/couriers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCourierRequest calls the generic CreateCourier builder with application/json body
func NewCreateCourierRequest(server string, body CreateCourierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCourierRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCourierRequestWithBody generates requests for CreateCourier with any type of body
func NewCreateCourierRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/couriers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCouriersAssignmentsRequest generates requests for CouriersAssignments
func NewCouriersAssignmentsRequest(server string, params *CouriersAssignmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/couriers/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CourierId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "courier_id", runtime.ParamLocationQuery, *params.CourierId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCourierMetaInfoRequest generates requests for GetCourierMetaInfo
func NewGetCourierMetaInfoRequest(server string, courierId int64, params *GetCourierMetaInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "courier_id", runtime.ParamLocationPath, courierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/couriers/meta-info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, params.StartDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, params.EndDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCourierByIdRequest generates requests for GetCourierById
func NewGetCourierByIdRequest(server string, courierId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "courier_id", runtime.ParamLocationPath, courierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/couriers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrdersRequest generates requests for GetOrders
func NewGetOrdersRequest(server string, params *GetOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrderRequest calls the generic CreateOrder builder with application/json body
func NewCreateOrderRequest(server string, body CreateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrderRequestWithBody generates requests for CreateOrder with any type of body
func NewCreateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrdersAssignRequest generates requests for OrdersAssign
func NewOrdersAssignRequest(server string, params *OrdersAssignParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders/assign")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Date != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteOrderRequest calls the generic CompleteOrder builder with application/json body
func NewCompleteOrderRequest(server string, body CompleteOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCompleteOrderRequestWithBody generates requests for CompleteOrder with any type of body
func NewCompleteOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders/complete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrderRequest generates requests for GetOrder
func NewGetOrderRequest(server string, orderId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "order_id", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCouriers request
	GetCouriersWithResponse(ctx context.Context, params *GetCouriersParams, reqEditors ...RequestEditorFn) (*GetCouriersResponse, error)

	// CreateCourier request with any body
	CreateCourierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCourierResponse, error)

	CreateCourierWithResponse(ctx context.Context, body CreateCourierJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCourierResponse, error)

	// CouriersAssignments request
	CouriersAssignmentsWithResponse(ctx context.Context, params *CouriersAssignmentsParams, reqEditors ...RequestEditorFn) (*CouriersAssignmentsResponse, error)

	// GetCourierMetaInfo request
	GetCourierMetaInfoWithResponse(ctx context.Context, courierId int64, params *GetCourierMetaInfoParams, reqEditors ...RequestEditorFn) (*GetCourierMetaInfoResponse, error)

	// GetCourierById request
	GetCourierByIdWithResponse(ctx context.Context, courierId int64, reqEditors ...RequestEditorFn) (*GetCourierByIdResponse, error)

	// GetOrders request
	GetOrdersWithResponse(ctx context.Context, params *GetOrdersParams, reqEditors ...RequestEditorFn) (*GetOrdersResponse, error)

	// CreateOrder request with any body
	CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	// OrdersAssign request
	OrdersAssignWithResponse(ctx context.Context, params *OrdersAssignParams, reqEditors ...RequestEditorFn) (*OrdersAssignResponse, error)

	// CompleteOrder request with any body
	CompleteOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteOrderResponse, error)

	CompleteOrderWithResponse(ctx context.Context, body CompleteOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteOrderResponse, error)

	// GetOrder request
	GetOrderWithResponse(ctx context.Context, orderId int64, reqEditors ...RequestEditorFn) (*GetOrderResponse, error)
}

type GetCouriersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouriersResponse
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r GetCouriersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouriersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCourierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCouriersResponse
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r CreateCourierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCourierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CouriersAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderAssignResponse
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r CouriersAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CouriersAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCourierMetaInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCourierMetaInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetCourierMetaInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCourierMetaInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCourierByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CourierDto
	JSON400      *BadRequestResponse
	JSON404      *NotFoundResponse
}

// Status returns HTTPResponse.Status
func (r GetCourierByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCourierByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrderDto
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r GetOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrderDto
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrdersAssignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]OrderAssignResponse
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r OrdersAssignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrdersAssignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrderDto
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r CompleteOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderDto
	JSON400      *BadRequestResponse
	JSON404      *NotFoundResponse
}

// Status returns HTTPResponse.Status
func (r GetOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCouriersWithResponse request returning *GetCouriersResponse
func (c *ClientWithResponses) GetCouriersWithResponse(ctx context.Context, params *GetCouriersParams, reqEditors ...RequestEditorFn) (*GetCouriersResponse, error) {
	rsp, err := c.GetCouriers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouriersResponse(rsp)
}

// CreateCourierWithBodyWithResponse request with arbitrary body returning *CreateCourierResponse
func (c *ClientWithResponses) CreateCourierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCourierResponse, error) {
	rsp, err := c.CreateCourierWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCourierResponse(rsp)
}

func (c *ClientWithResponses) CreateCourierWithResponse(ctx context.Context, body CreateCourierJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCourierResponse, error) {
	rsp, err := c.CreateCourier(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCourierResponse(rsp)
}

// CouriersAssignmentsWithResponse request returning *CouriersAssignmentsResponse
func (c *ClientWithResponses) CouriersAssignmentsWithResponse(ctx context.Context, params *CouriersAssignmentsParams, reqEditors ...RequestEditorFn) (*CouriersAssignmentsResponse, error) {
	rsp, err := c.CouriersAssignments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCouriersAssignmentsResponse(rsp)
}

// GetCourierMetaInfoWithResponse request returning *GetCourierMetaInfoResponse
func (c *ClientWithResponses) GetCourierMetaInfoWithResponse(ctx context.Context, courierId int64, params *GetCourierMetaInfoParams, reqEditors ...RequestEditorFn) (*GetCourierMetaInfoResponse, error) {
	rsp, err := c.GetCourierMetaInfo(ctx, courierId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCourierMetaInfoResponse(rsp)
}

// GetCourierByIdWithResponse request returning *GetCourierByIdResponse
func (c *ClientWithResponses) GetCourierByIdWithResponse(ctx context.Context, courierId int64, reqEditors ...RequestEditorFn) (*GetCourierByIdResponse, error) {
	rsp, err := c.GetCourierById(ctx, courierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCourierByIdResponse(rsp)
}

// GetOrdersWithResponse request returning *GetOrdersResponse
func (c *ClientWithResponses) GetOrdersWithResponse(ctx context.Context, params *GetOrdersParams, reqEditors ...RequestEditorFn) (*GetOrdersResponse, error) {
	rsp, err := c.GetOrders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersResponse(rsp)
}

// CreateOrderWithBodyWithResponse request with arbitrary body returning *CreateOrderResponse
func (c *ClientWithResponses) CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

// OrdersAssignWithResponse request returning *OrdersAssignResponse
func (c *ClientWithResponses) OrdersAssignWithResponse(ctx context.Context, params *OrdersAssignParams, reqEditors ...RequestEditorFn) (*OrdersAssignResponse, error) {
	rsp, err := c.OrdersAssign(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrdersAssignResponse(rsp)
}

// CompleteOrderWithBodyWithResponse request with arbitrary body returning *CompleteOrderResponse
func (c *ClientWithResponses) CompleteOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteOrderResponse, error) {
	rsp, err := c.CompleteOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteOrderResponse(rsp)
}

func (c *ClientWithResponses) CompleteOrderWithResponse(ctx context.Context, body CompleteOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteOrderResponse, error) {
	rsp, err := c.CompleteOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteOrderResponse(rsp)
}

// GetOrderWithResponse request returning *GetOrderResponse
func (c *ClientWithResponses) GetOrderWithResponse(ctx context.Context, orderId int64, reqEditors ...RequestEditorFn) (*GetOrderResponse, error) {
	rsp, err := c.GetOrder(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderResponse(rsp)
}

// ParseGetCouriersResponse parses an HTTP response from a GetCouriersWithResponse call
func ParseGetCouriersResponse(rsp *http.Response) (*GetCouriersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouriersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouriersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateCourierResponse parses an HTTP response from a CreateCourierWithResponse call
func ParseCreateCourierResponse(rsp *http.Response) (*CreateCourierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCourierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCouriersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCouriersAssignmentsResponse parses an HTTP response from a CouriersAssignmentsWithResponse call
func ParseCouriersAssignmentsResponse(rsp *http.Response) (*CouriersAssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CouriersAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderAssignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCourierMetaInfoResponse parses an HTTP response from a GetCourierMetaInfoWithResponse call
func ParseGetCourierMetaInfoResponse(rsp *http.Response) (*GetCourierMetaInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCourierMetaInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCourierMetaInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCourierByIdResponse parses an HTTP response from a GetCourierByIdWithResponse call
func ParseGetCourierByIdResponse(rsp *http.Response) (*GetCourierByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCourierByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CourierDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrdersResponse parses an HTTP response from a GetOrdersWithResponse call
func ParseGetOrdersResponse(rsp *http.Response) (*GetOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrderDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateOrderResponse parses an HTTP response from a CreateOrderWithResponse call
func ParseCreateOrderResponse(rsp *http.Response) (*CreateOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrderDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseOrdersAssignResponse parses an HTTP response from a OrdersAssignWithResponse call
func ParseOrdersAssignResponse(rsp *http.Response) (*OrdersAssignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrdersAssignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []OrderAssignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCompleteOrderResponse parses an HTTP response from a CompleteOrderWithResponse call
func ParseCompleteOrderResponse(rsp *http.Response) (*CompleteOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrderDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrderResponse parses an HTTP response from a GetOrderWithResponse call
func ParseGetOrderResponse(rsp *http.Response) (*GetOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server controllers.
type ServerInterface interface {

	// (GET /couriers)
	GetCouriers(ctx echo.Context, params GetCouriersParams) error

	// (POST /couriers)
	CreateCourier(ctx echo.Context) error
	// Список распределенных заказов
	// (GET /couriers/assignments)
	CouriersAssignments(ctx echo.Context, params CouriersAssignmentsParams) error

	// (GET /couriers/meta-info/{courier_id})
	GetCourierMetaInfo(ctx echo.Context, courierId int64, params GetCourierMetaInfoParams) error

	// (GET /couriers/{courier_id})
	GetCourierById(ctx echo.Context, courierId int64) error

	// (GET /orders)
	GetOrders(ctx echo.Context, params GetOrdersParams) error

	// (POST /orders)
	CreateOrder(ctx echo.Context) error
	// Распределение заказов по курьерам
	// (POST /orders/assign)
	OrdersAssign(ctx echo.Context, params OrdersAssignParams) error

	// (POST /orders/complete)
	CompleteOrder(ctx echo.Context) error

	// (GET /orders/{order_id})
	GetOrder(ctx echo.Context, orderId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCouriers converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouriers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouriersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCouriers(ctx, params)
	return err
}

// CreateCourier converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCourier(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCourier(ctx)
	return err
}

// CouriersAssignments converts echo context to params.
func (w *ServerInterfaceWrapper) CouriersAssignments(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CouriersAssignmentsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "courier_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "courier_id", ctx.QueryParams(), &params.CourierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter courier_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CouriersAssignments(ctx, params)
	return err
}

// GetCourierMetaInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourierMetaInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "courier_id" -------------
	var courierId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "courier_id", runtime.ParamLocationPath, ctx.Param("courier_id"), &courierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter courier_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCourierMetaInfoParams
	// ------------- Required query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Required query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCourierMetaInfo(ctx, courierId, params)
	return err
}

// GetCourierById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourierById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "courier_id" -------------
	var courierId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "courier_id", runtime.ParamLocationPath, ctx.Param("courier_id"), &courierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter courier_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCourierById(ctx, courierId)
	return err
}

// GetOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrders(ctx, params)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// OrdersAssign converts echo context to params.
func (w *ServerInterfaceWrapper) OrdersAssign(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OrdersAssignParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrdersAssign(ctx, params)
	return err
}

// CompleteOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CompleteOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CompleteOrder(ctx)
	return err
}

// GetOrder converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "order_id", runtime.ParamLocationPath, ctx.Param("order_id"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrder(ctx, orderId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers controllers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/couriers", wrapper.GetCouriers)
	router.POST(baseURL+"/couriers", wrapper.CreateCourier)
	router.GET(baseURL+"/couriers/assignments", wrapper.CouriersAssignments)
	router.GET(baseURL+"/couriers/meta-info/:courier_id", wrapper.GetCourierMetaInfo)
	router.GET(baseURL+"/couriers/:courier_id", wrapper.GetCourierById)
	router.GET(baseURL+"/orders", wrapper.GetOrders)
	router.POST(baseURL+"/orders", wrapper.CreateOrder)
	router.POST(baseURL+"/orders/assign", wrapper.OrdersAssign)
	router.POST(baseURL+"/orders/complete", wrapper.CompleteOrder)
	router.GET(baseURL+"/orders/:order_id", wrapper.GetOrder)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xazW7bRhB+FWLbI23JdtCDbnHTBEbaGgjSQ5EGxkZcyUzEnyyXSQxDgGW1DQIbyaUF",
	"iqKH9g1UNYoV25JfYfaNilmSEimREtnIqvMDBIglzuzMfjPzzc5S+6TqWK5jM1t4pLJPvOous6j6c5Ma",
	"d9hjn3niDvNcx/YYfiv2XEYqxHnwkFUFaerkS8dyG0ywbW4wjhIud1zGhcnUKtXw8Y4wLbVAzeEWFaRC",
	"DCrYivpWj1b1BDftOq5adXxuMr5jGgkd0xZfXBvLm7ZgdcZRwUHzecWbOuHssW9yZpDKvQkfE8ZjC9/X",
	"52w+ROuGcGbAYNo19dgUzFJPPuesRirks9I4EKUwCqUkts2RA5Rzupe9DWUj3V21sQwPCyIeKQRP9gmz",
	"fQvduLm9fZfoZHPr9ldEJ9e/u7sd82UcYc7qpmN7CSziVjfWU60mEdDJU4c/Mu36zq7j8+RiUxbngBeL",
	"eWJrY1cnrc2A2LvFHd9VcfMWgLUzWihX3sSNF9p4aCd1Y5xRwfJk0IeVEP8lB+JQhayQCVf+qE5FIOcW",
	"cjjpxSn+Xd1cqIMqizPSLUA1R44YrGE+YXyveFIk0jKHpafMrO8m3ao1HCrGwrZvPUjtQR4KTXiayLtg",
	"6TlQZaZbQQqZQH9eJGcQxy0mwpT4hgm6Zdecucm2tCbEKLdNu543upwKVMwp/GE2uHE4l0UaOmmYlpm3",
	"1p1azWP5hLPYKDI4WiwVh1kNvo4PdwqdSQs3+dy1OeHMzC7/rSNuOr5tzDzyK8vXPc+s24tPAW/m4UVX",
	"Y8PUHDE9QkxgEArNbDizWk1wsjYKTzFLaVEF8+x/7mixRMzR3HDVaGYSpmjgs++pbbBn2tf0ySNKdPKE",
	"cc90bFIha6tlhYfLbOqapEI2Vsura0QnLhW7asOleFrWA57ASFNhOvaWQSpxflOKnFpMKIV7+8RgXpWb",
	"rgjMwR/QgVPZgj6cQwfO5DEMYAg9DU5hCGfQl8+hJ1vyELow1OBUtuWBPIaePIAhdDX1Tx7Ba+ig4KoG",
	"v8oWqmlwAR15AB04h548lAcaDHDVC6XaQwUY6Jo8xFVPYBDowwD6gdRQk204RxfkcxSFvnypqfW66KC2",
	"tkp0wp5RTGpSWSsjwqRCHvuM7xGd2BRzfMSBQX3mJNQpiH7PgYSuAMPtqM89DQayDW+Ur3ChvruQbaXe",
	"l4fyWIPXcCZfaYEO/K229iZAQL5CXHrKxAvowVsN9ZQEPv1ZHi0P53IC5wyYwxZTDOf7WDsB86pMXi+X",
	"A56yBbNVUlPXbZhVldalhx7GYj9mYebwmNLgVRkmI+s8wlK7tkDDKRdOKXYfUEPj4SEXnwqKx7dR915B",
	"V7jTaDBO7jd14oYUnCzyxPBDAt5inth0jL2FbSd1CmwmWVJwnzUvMZYZQ977Gs6mPibwElUHECu6uUwl",
	"82jn12Oy80j9F+jIQ+ioQpYtxT9IBT04GzEMnCDxQwdOkL7ihIL8IdvhM6SETsQffVxLccUxnMi2IpxW",
	"kq368FZTlgbymKSzRXiOSeGKrGPQ1P5+C00gmf4IffQ1oN4kL3dGLBt43Y64D33GreCGTqdxClAayCP5",
	"UwGcdA07A5xAVy33AjryZQhQQMO4YsS60JUt6MH5hMNwvpqBWmL2GWO3VFpNOzRf4Tr0fMuifA8T5q8w",
	"2EM4zSqKtHCTIsVsMUFX8JxX2h8Hq5njkBbdKcwr61BcMw1mC7MW0L7KFTwbZqRKkqizWnTGK4ZJD+6o",
	"ywOtShtVv6G2onmCcqGFlTs6KJD18vrGSnltZb2ckc9K70aglsPHvNSQ4iGzjRn+rWX4x2zjnb1bzhFn",
	"6koqpTS2bxfsTAVTeHNvy7hy6XuZ8Mcve64oA6ID1xbmwNStSop52xFaDYXyJdv4sigru8IrlMXOsAmG",
	"/4gn2AQOn+bXZc+v73pBeuXHH1XeRWbZ4CcClznJJl4vXcIc+zHGdMzk4Tir7p7DME/NpcgZuadSDUkB",
	"3sBr2Z6ak6CvqXkO2egIurFhSxFLD5XkSzWR9qZIRh5VtB/8cnmj6jfU/yz41DCDT9BFoox70wkESpFE",
	"Ul7t5B/owxAGyIxDRZTIQafQn63ZUvyJnUspBcw6X78UOU70iVoKemYwpX1kFwXTlLx2SeU7OQS/P5Uc",
	"G4r/TI851stEGV5M3nh34JzkZYXozVOcFyavuOK/EbukBpDxM7dPXWDRXWA/ejvWnHu0n8dPSmjuwJh4",
	"G3c1x8VxtD8NizOHxbTUajb/DQAA//+Ff/P/4ysAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
